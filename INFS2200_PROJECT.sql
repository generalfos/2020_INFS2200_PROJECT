set pagesize 30
set line 200

-- Populate Database

@H:\prjScript.sql

-- TASK 1

--- Q1
SELECT OWNER, CONSTRAINT_NAME, TABLE_NAME, SEARCH_CONDITION, INDEX_NAME
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('FILM_ACTOR', 'FILM', 'CATEGORY', 'LANGUAGE', 'FILM_CATEGORY', 'ACTOR');

--- Q2

---- PK_CATEGORYID:

ALTER TABLE CATEGORY ADD CONSTRAINT PK_CATEGORYID PRIMARY KEY (category_id);

---- PK_LANGUAGEID:

ALTER TABLE LANGUAGE ADD CONSTRAINT PK_LANGUAGEID PRIMARY KEY (language_id);

---- UN_DESCRIPTION:

ALTER TABLE FILM ADD CONSTRAINT UN_DESCRIPTION UNIQUE (description);

---- CK_FNAME:

ALTER TABLE ACTOR MODIFY first_name VARCHAR2(45) NOT NULL;

---- CK_LNAME:

ALTER TABLE ACTOR MODIFY last_name VARCHAR2(45) NOT NULL;

---- CK_CATNAME:

ALTER TABLE CATEGORY MODIFY name VARCHAR2(25) NOT NULL;

---- CK_LANNAME:

ALTER TABLE LANGUAGE MODIFY name VARCHAR2(20) NOT NULL;

---- CK_TITLE:

ALTER TABLE FILM MODIFY title VARCHAR2(255) NOT NULL;

---- CK_RELEASEYR:

ALTER TABLE FILM ADD CONSTRAINT CK_RELEASEYR 
CHECK (release_year <= 2020);

---- CK_RATING:

ALTER TABLE FILM ADD CONSTRAINT CK_RATING
CHECK (rating IN ('G', 'PG', 'PG-13', 'R', 'NC-17'));

---- CK_SPLFEATURES:

ALTER TABLE FILM ADD CONSTRAINT CK_SPLFEATURES
CHECK (special_features IN ('Trailers', 'Commentaries', 'Deleted Scenes', 'Behind the Scenes', NULL));

---- FK_LANGUAGEID:

ALTER TABLE FILM ADD CONSTRAINT FK_LANGUAGEID
FOREIGN KEY (language_id) REFERENCES LANGUAGE (language_id);

---- FK_ORLANGUAGEID:

ALTER TABLE FILM ADD CONSTRAINT FK_ORLANGUAGEID
FOREIGN KEY (original_language_id) REFERENCES LANGUAGE (language_id);

---- FK_ACTORID:

ALTER TABLE FILM_ACTOR ADD CONSTRAINT FK_ACTORID
FOREIGN KEY (actor_id) REFERENCES ACTOR (actor_id);

---- FK_CATEGORYID:

ALTER TABLE FILM_CATEGORY ADD CONSTRAINT FK_CATEGORYID
FOREIGN KEY (category_id) REFERENCES CATEGORY (category_id);

---- FK_FILMID2:

ALTER TABLE FILM_CATEGORY ADD CONSTRAINT FK_FILMID2
FOREIGN KEY (film_id) REFERENCES FILM (film_id);

-- Task 2.

--- Q1.

CREATE SEQUENCE "FILM_ID_SEQ" MINVALUE 20010 MAXVALUE 999999999999
INCREMENT BY 10 START WITH 20010;

--- Q2.

CREATE OR REPLACE TRIGGER "BI_FILM_ID"
  BEFORE INSERT ON "FILM"
  FOR EACH ROW
BEGIN
  SELECT "FILM_ID_SEQ".NEXTVAL INTO :NEW.film_id FROM DUAL;
END;
/

--- Q3.

CREATE OR REPLACE TRIGGER "BI_FILM_DESP"
	BEFORE INSERT ON "FILM"
	FOR EACH ROW
	WHEN (NEW.rating IS NOT NULL AND NEW.language_id IS NOT NULL AND NEW.original_language_id IS NOT NULL)
DECLARE
	rating_count int;
	new_language varchar2(20);
	release_language varchar2(20);
BEGIN
	SELECT COUNT(*) INTO rating_count
	FROM FILM
	WHERE FILM.rating = :NEW.rating;
		
	SELECT name INTO release_language
	FROM LANGUAGE
	WHERE :NEW.original_language_id = LANGUAGE.language_id;
		
	SELECT name INTO new_language
	FROM LANGUAGE
	WHERE :NEW.language_id = LANGUAGE.language_id;

	SELECT (:NEW.description || :NEW.rating || '-' || TO_CHAR(rating_count) ||
	': Originally in ' || release_language || '. Re-released in ' || new_language || '.') INTO :NEW.description 
	FROM DUAL;
END;
/

-- TASK 3.

--- Q1

SELECT title, length
FROM FILM, FILM_CATEGORY, CATEGORY
WHERE FILM.film_id = FILM_CATEGORY.film_id 
	AND FILM_CATEGORY.category_id = CATEGORY.category_id 
	AND CATEGORY.name = 'Action'
	AND length = (SELECT MIN(length)
				  FROM FILM, FILM_CATEGORY, CATEGORY
				  WHERE FILM.film_id = FILM_CATEGORY.film_id 
				  AND FILM_CATEGORY.category_id = CATEGORY.category_id 
				  AND CATEGORY.name = 'Action');

--- Q2.

CREATE VIEW MIN_ACTION_ACTORS AS
	SELECT DISTINCT(A.actor_id), A.first_name, A.last_name
	FROM ACTOR A, (SELECT actor_id
				   FROM FILM_ACTOR, FILM, FILM_CATEGORY, CATEGORY
				   WHERE FILM.film_id = FILM_CATEGORY.film_id
				   AND FILM.film_id = FILM_ACTOR.film_id
				   AND FILM_CATEGORY.category_id = CATEGORY.category_id 
				   AND CATEGORY.name = 'Action'
				   AND length = (SELECT MIN(F.length)
								 FROM FILM F, FILM_CATEGORY, CATEGORY
								 WHERE FILM.film_id = FILM_CATEGORY.film_id 
								 AND FILM_CATEGORY.category_id = CATEGORY.category_id 
								 AND CATEGORY.name = 'Action')) B
	WHERE A.actor_id = B.actor_id;

--- Q3.

CREATE VIEW V_ACTION_ACTORS_2012 AS
	SELECT DISTINCT(A.actor_id), A.first_name, A.last_name
	FROM ACTOR A, (SELECT actor_id
				   FROM FILM_ACTOR, FILM, FILM_CATEGORY, CATEGORY
				   WHERE FILM.film_id = FILM_CATEGORY.film_id
				   AND FILM.film_id = FILM_ACTOR.film_id
				   AND FILM_CATEGORY.category_id = CATEGORY.category_id
				   AND CATEGORY.name = 'Action'
				   AND FILM.release_year = '2012') B
	WHERE A.actor_id = B.actor_id;

--- Q4.

CREATE MATERIALIZED VIEW MV_ACTION_ACTORS_2012
	BUILD IMMEDIATE
	AS
	SELECT DISTINCT(A.actor_id), A.first_name, A.last_name
	FROM ACTOR A, (SELECT actor_id
				   FROM FILM_ACTOR, FILM, FILM_CATEGORY, CATEGORY
				   WHERE FILM.film_id = FILM_CATEGORY.film_id
				   AND FILM.film_id = FILM_ACTOR.film_id
				   AND FILM_CATEGORY.category_id = CATEGORY.category_id 
				   AND CATEGORY.name = 'Action'
				   AND FILM.release_year = '2012') B
	WHERE A.actor_id = B.actor_id;

--- Q5.

SET TIMING ON;

SELECT * FROM V_ACTION_ACTORS_2012;
SELECT * FROM MV_ACTION_ACTORS_2012;

SET TIMING OFF;

EXPLAIN PLAN FOR SELECT * FROM V_ACTION_ACTORS_2012;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

EXPLAIN PLAN FOR SELECT * FROM MV_ACTION_ACTORS_2012;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

-- TASK 4.

--- Q1

SELECT *
FROM FILM F
WHERE INSTR(F.description, 'Boat') IS NOT NULL AND INSTR(F.description, 'Boat') > 0
ORDER BY F.title
FETCH FIRST 100 ROWS ONLY;

--- Q2

CREATE INDEX IDX_BOAT ON FILM(INSTR(description, 'Boat'));

--- Q3.

DROP INDEX IDX_BOAT;
SET TIMING ON;

SELECT *
FROM FILM F
WHERE INSTR(F.description, 'Boat') IS NOT NULL AND INSTR(F.description, 'Boat') > 0
ORDER BY F.title
FETCH FIRST 100 ROWS ONLY;

SET TIMING OFF;

EXPLAIN PLAN FOR SELECT *
FROM FILM F
WHERE INSTR(F.description, 'Boat') IS NOT NULL AND INSTR(F.description, 'Boat') > 0
ORDER BY F.title
FETCH FIRST 100 ROWS ONLY;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

CREATE INDEX IDX_BOAT ON FILM(INSTR(description, 'Boat'));

SET TIMING ON;

SELECT *
FROM FILM F
WHERE INSTR(F.description, 'Boat') IS NOT NULL AND INSTR(F.description, 'Boat') > 0
ORDER BY F.title
FETCH FIRST 100 ROWS ONLY;

SET TIMING OFF;

EXPLAIN PLAN FOR SELECT *
FROM FILM F
WHERE INSTR(F.description, 'Boat') IS NOT NULL AND INSTR(F.description, 'Boat') > 0
ORDER BY F.title
FETCH FIRST 100 ROWS ONLY;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

--- Q4.

SELECT COUNT(*)
FROM (SELECT film_id
	  FROM FILM G, (SELECT F.release_year, F.rating, F.special_features, COUNT(*)
					FROM FILM F
					GROUP BY F.release_year, F.rating, F.special_features
					HAVING COUNT(*) >= 41) H
	  WHERE G.release_year = H.release_year AND
			G.rating = H.rating AND
			G.special_features = H.special_features);

-- TASK 5

--- Q1

ANALYZE INDEX PK_FILMID VALIDATE STRUCTURE;

---- a, b)

SELECT HEIGHT, LF_BLKS
FROM INDEX_STATS;

---- c) 

SELECT BLOCKS
FROM USER_TABLES
WHERE table_name = 'FILM';

--- Q2

EXPLAIN PLAN FOR SELECT /*+RULE*/ * FROM FILM WHERE FILM_ID > 100;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

--- Q3

EXPLAIN PLAN FOR SELECT * FROM FILM WHERE FILM_ID > 100;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

--- Q4

EXPLAIN PLAN FOR SELECT * FROM FILM WHERE FILM_ID > 19990;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

--- Q5

EXPLAIN PLAN FOR SELECT * FROM FILM WHERE FILM_ID = 100;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
